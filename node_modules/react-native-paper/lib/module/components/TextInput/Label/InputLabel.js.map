{"version":3,"sources":["InputLabel.tsx"],"names":["React","Animated","StyleSheet","AnimatedText","useTheme","InputLabel","props","isV3","parentState","labelBackground","mode","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","maxFontSizeMultiplier","labelProps","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","textColor","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","top","color","md3TextLine","create","zIndex","lineHeight","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { useTheme } from '../../../core/theming';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { isV3 } = useTheme();\n  const { parentState, labelBackground, mode } = props;\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  let textColor = placeholderColor;\n\n  if (error && errorColor) {\n    textColor = errorColor;\n  }\n  if (isV3 && parentState.value && mode !== 'outlined') {\n    textColor = activeColor;\n  }\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n        maxFontSizeMultiplier: maxFontSizeMultiplier,\n      })}\n      <AnimatedText\n        variant=\"bodySmall\"\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n          isV3 && styles.md3TextLine,\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        variant={parentState.focused ? 'bodyLarge' : 'bodySmall'}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: textColor,\n            opacity: placeholderOpacity,\n          },\n          isV3 && styles.md3TextLine,\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n  md3TextLine: {\n    lineHeight: undefined,\n  },\n});\n\nexport default InputLabel;\n"]}