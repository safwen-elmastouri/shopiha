{"version":3,"sources":["TextInputAffix.tsx"],"names":["AffixContext","React","createContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","TextInputAffix","text","labelStyle","theme","AFFIX_OFFSET","isV3","useContext","textColor","colors","onSurface","alpha","dark","rgb","string","offset","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","StyleSheet","create","position","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\nimport type { Theme } from '../../../types';\nimport { getConstants } from '../helpers';\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const { AFFIX_OFFSET } = getConstants(theme.isV3);\n\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n  } = React.useContext(AffixContext);\n\n  const textColor = color(\n    theme.isV3 ? theme.colors.onSurface : theme.colors?.text\n  )\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]}