{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useTheme } from \"../../../core/theming\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\nvar LabelBackground = function LabelBackground(_ref) {\n  var parentState = _ref.parentState,\n    _ref$labelProps = _ref.labelProps,\n    placeholderStyle = _ref$labelProps.placeholderStyle,\n    baseLabelTranslateX = _ref$labelProps.baseLabelTranslateX,\n    topPosition = _ref$labelProps.topPosition,\n    hasActiveOutline = _ref$labelProps.hasActiveOutline,\n    label = _ref$labelProps.label,\n    backgroundColor = _ref$labelProps.backgroundColor,\n    roundness = _ref$labelProps.roundness,\n    labelStyle = _ref.labelStyle,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  var hasFocus = hasActiveOutline || parentState.value;\n  var opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0]\n  });\n  var _useTheme = useTheme(),\n    isV3 = _useTheme.isV3,\n    colors = _useTheme.colors;\n  var labelTranslationX = {\n    translateX: parentState.labeled.interpolate({\n      inputRange: [0, 1],\n      outputRange: [-baseLabelTranslateX, 0]\n    })\n  };\n  var labelTextScaleY = {\n    scaleY: parentState.labeled.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.2, 1]\n    })\n  };\n  var labelTextTransform = isV3 ? _toConsumableArray(labelStyle.transform) : [].concat(_toConsumableArray(labelStyle.transform), [labelTextScaleY]);\n  var labelTextWidth = isV3 ? {\n    width: parentState.labelLayout.width - placeholderStyle.paddingHorizontal\n  } : {\n    maxWidth: parentState.labelLayout.width - 2 * placeholderStyle.paddingHorizontal\n  };\n  return label ? [React.createElement(Animated.View, {\n    key: \"labelBackground-view\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.view, {\n      backgroundColor: backgroundColor,\n      maxHeight: Math.max(roundness / 3, 2),\n      opacity: opacity,\n      bottom: Math.max(roundness, 2),\n      transform: [labelTranslationX]\n    }]\n  }), React.createElement(AnimatedText, {\n    key: \"labelBackground-text\",\n    style: [placeholderStyle, labelStyle, styles.outlinedLabel, isV3 && styles.md3OutlinedLabel, {\n      top: topPosition + (isV3 ? 0 : 1),\n      backgroundColor: isV3 ? colors.surface : backgroundColor,\n      opacity: opacity,\n      transform: labelTextTransform\n    }, labelTextWidth],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label)] : null;\n};\nexport default LabelBackground;\nvar styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent'\n  },\n  md3OutlinedLabel: {\n    left: 8\n  }\n});","map":{"version":3,"mappings":"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","names":["React","useTheme","AnimatedText","LabelBackground","_ref","parentState","labelProps","placeholderStyle","baseLabelTranslateX","topPosition","hasActiveOutline","label","backgroundColor","roundness","labelStyle","maxFontSizeMultiplier","hasFocus","value","opacity","labeled","interpolate","inputRange","outputRange","isV3","colors","labelTranslationX","translateX","labelTextScaleY","scaleY","labelTextTransform","transform","labelTextWidth","width","labelLayout","paddingHorizontal","maxWidth","Animated","View","key","pointerEvents","style","StyleSheet","absoluteFill","styles","view","maxHeight","Math","max","bottom","outlinedLabel","md3OutlinedLabel","top","surface","numberOfLines","create","position","left","color"],"sources":["LabelBackground.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { useTheme } from '../../../core/theming';\n\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { LabelBackgroundProps } from '../types';\n\nconst LabelBackground = ({\n  parentState,\n  labelProps: {\n    placeholderStyle,\n    baseLabelTranslateX,\n    topPosition,\n    hasActiveOutline,\n    label,\n    backgroundColor,\n    roundness,\n  },\n  labelStyle,\n  maxFontSizeMultiplier,\n}: LabelBackgroundProps) => {\n  const hasFocus = hasActiveOutline || parentState.value;\n  const opacity = parentState.labeled.interpolate({\n    inputRange: [0, 1],\n    outputRange: [hasFocus ? 1 : 0, 0],\n  });\n\n  const { isV3, colors } = useTheme();\n\n  const labelTranslationX = {\n    translateX: parentState.labeled.interpolate({\n      inputRange: [0, 1],\n      outputRange: [-baseLabelTranslateX, 0],\n    }),\n  };\n\n  const labelTextScaleY = {\n    scaleY: parentState.labeled.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.2, 1],\n    }),\n  };\n\n  const labelTextTransform = isV3\n    ? [...labelStyle.transform]\n    : [...labelStyle.transform, labelTextScaleY];\n\n  const labelTextWidth = isV3\n    ? {\n        width:\n          parentState.labelLayout.width - placeholderStyle.paddingHorizontal,\n      }\n    : {\n        maxWidth:\n          parentState.labelLayout.width -\n          2 * placeholderStyle.paddingHorizontal,\n      };\n\n  return label\n    ? [\n        <Animated.View\n          key=\"labelBackground-view\"\n          pointerEvents=\"none\"\n          style={[\n            StyleSheet.absoluteFill,\n            styles.view,\n            {\n              backgroundColor,\n              maxHeight: Math.max(roundness / 3, 2),\n              opacity,\n              bottom: Math.max(roundness, 2),\n              transform: [labelTranslationX],\n            },\n          ]}\n        />,\n        <AnimatedText\n          key=\"labelBackground-text\"\n          style={[\n            placeholderStyle,\n            labelStyle,\n            styles.outlinedLabel,\n            isV3 && styles.md3OutlinedLabel,\n            {\n              top: topPosition + (isV3 ? 0 : 1),\n              backgroundColor: isV3 ? colors.surface : backgroundColor,\n              opacity,\n              transform: labelTextTransform,\n            },\n            labelTextWidth,\n          ]}\n          numberOfLines={1}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        >\n          {label}\n        </AnimatedText>,\n      ]\n    : null;\n};\n\nexport default LabelBackground;\n\nconst styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12,\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 18,\n    paddingHorizontal: 0,\n    color: 'transparent',\n  },\n  md3OutlinedLabel: {\n    left: 8,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}