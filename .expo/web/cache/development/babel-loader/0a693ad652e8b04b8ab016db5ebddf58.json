{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport color from 'color';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { withTheme } from \"../../../core/theming\";\nimport { AdornmentSide } from \"./enums\";\nimport { getConstants } from \"../helpers\";\nvar AffixContext = React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\nvar AffixAdornment = function AffixAdornment(_ref) {\n  var affix = _ref.affix,\n    side = _ref.side,\n    textStyle = _ref.textStyle,\n    topPosition = _ref.topPosition,\n    onLayout = _ref.onLayout,\n    visible = _ref.visible,\n    paddingHorizontal = _ref.paddingHorizontal,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  return React.createElement(AffixContext.Provider, {\n    value: {\n      side: side,\n      textStyle: textStyle,\n      topPosition: topPosition,\n      onLayout: onLayout,\n      visible: visible,\n      paddingHorizontal: paddingHorizontal,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }\n  }, affix);\n};\n\nvar TextInputAffix = function TextInputAffix(_ref2) {\n  var _theme$colors;\n  var text = _ref2.text,\n    labelStyle = _ref2.textStyle,\n    theme = _ref2.theme;\n  var _getConstants = getConstants(theme.isV3),\n    AFFIX_OFFSET = _getConstants.AFFIX_OFFSET;\n  var _React$useContext = React.useContext(AffixContext),\n    textStyle = _React$useContext.textStyle,\n    onLayout = _React$useContext.onLayout,\n    topPosition = _React$useContext.topPosition,\n    side = _React$useContext.side,\n    visible = _React$useContext.visible,\n    paddingHorizontal = _React$useContext.paddingHorizontal,\n    maxFontSizeMultiplier = _React$useContext.maxFontSizeMultiplier;\n  var textColor = color(theme.isV3 ? theme.colors.onSurface : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, offset);\n  return React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, React.createElement(Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\nTextInputAffix.displayName = 'TextInput.Affix';\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(TextInputAffix);\n\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAAA;AAAA;AAAA;AAWA,SAASC,SAAT;AACA,SAASC,aAAT;AAEA,SAASC,YAAT;AA4BA,IAAMC,YAAY,GAAGL,KAAK,CAACM,aAAN,CAAkC;EACrDC,SAAS,EAAE;IAAEC,UAAU,EAAE,EAAd;IAAkBP,KAAK,EAAE;EAAzB,CAD0C;EAErDQ,WAAW,EAAE,IAFwC;EAGrDC,IAAI,EAAEP,aAAa,CAACQ;AAHiC,CAAlC,CAArB;AAMA,IAAMC,cAKL,GAAG,SALEA,cAKL,CAAGC,MASE;EAAA,IARJC,KADG,GASCD,KARJC,KADG;IAEHJ,IAFG,GASCG,KAPJH,IAFG;IAGHH,SAHG,GASCM,KANJN,SAHG;IAIHE,WAJG,GASCI,KALJJ,WAJG;IAKHM,QALG,GASCF,KAJJE,QALG;IAMHC,OANG,GASCH,KAHJG,OANG;IAOHC,iBAPG,GASCJ,KAFJI,iBAPG;IAQHC,wBACIL,KADJK;EAEA,OACElB,oBAACK,YAAD,CAAcc,QAAd;IACEC,KAAK,EAAE;MACLV,IADK,EACLA,IADK;MAELH,SAFK,EAELA,SAFK;MAGLE,WAHK,EAGLA,WAHK;MAILM,QAJK,EAILA,QAJK;MAKLC,OALK,EAKLA,OALK;MAMLC,iBANK,EAMLA,iBANK;MAOLC;IAPK;EADT,GAWGJ,KAXH,CADF;AAeD,CA9BD;;AA+DA,IAAMO,cAAc,GAAG,SAAjBA,cAAc,CAAGC,OAAmD;EAAA;EAAA,IAAhDC,IAAF,GAAkDD,MAAhDC,IAAF;IAAmBC,UAAnB,GAAkDF,MAA1Cf,SAAS;IAAckB,QAAmBH,MAAnBG;EACrD,oBAAyBrB,YAAY,CAACqB,KAAK,CAACC,IAAP,CAArC;IAAQC;EAER,wBAQI3B,KAAK,CAAC4B,UAAN,CAAiBvB,YAAjB,CARJ;IACEE,SADI,qBACJA,SADI;IAEJQ,QAFI,qBAEJA,QAFI;IAGJN,WAHI,qBAGJA,WAHI;IAIJC,IAJI,qBAIJA,IAJI;IAKJM,OALI,qBAKJA,OALI;IAMJC,iBANI,qBAMJA,iBANI;IAOJC;EAGF,IAAMW,SAAS,GAAG5B,KAAK,CACrBwB,KAAK,CAACC,IAAN,GAAaD,KAAK,CAACK,MAAN,CAAaC,SAA1B,oBAAsCN,KAAK,CAACK,MAA5C,kDAAsCE,cAAcT,IAD/B,CAAL,CAGfU,KAHe,CAGTR,KAAK,CAACS,IAAN,GAAa,GAAb,GAAmB,IAHV,EAIfC,GAJe,GAKfC,MALe,EAAlB;EAOA,IAAMC,MAAM,GACV,OAAOpB,iBAAP,KAA6B,QAA7B,GAAwCA,iBAAxC,GAA4DU,YAD9D;EAGA,IAAMW,KAAK;IACTC,GAAG,EAAE9B;EADO,GAEXC,IAAD,EAAQ2B,OAFV;EAKA,OACErC,oBAACwC,QAAD,CAAUC,IAAV;IACEH,KAAK,EAAE,CACLI,MAAM,CAACC,SADF,EAELL,KAFK,EAGL;MACEM,OAAO,EACL,QAAO,SAAP,WAAO,WAAP,mBAAO,CAAEC,WAAT,CAAqB;QACnBC,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADO;QAEnBC,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;MAFM,CAArB,MAGM;IALV,CAHK,CADT;IAYEhC,QAAQ,EAAEA;EAZZ,GAcEf,oBAACgD,IAAD;IACE9B,qBAAqB,EAAEA,qBADzB;IAEEoB,KAAK,EAAE,CAAC;MAAErC,KAAK,EAAE4B;IAAT,CAAD,EAAuBtB,SAAvB,EAAkCiB,UAAlC;EAFT,GAIGD,IAJH,CAdF,CADF;AAuBD,CAnDD;AAoDAF,cAAc,CAAC4B,WAAf,GAA6B,iBAA7B;AAEA,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;EAC/BR,SAAS,EAAE;IACTS,QAAQ,EAAE,UADD;IAETC,cAAc,EAAE,QAFP;IAGTC,UAAU,EAAE;EAHH;AADoB,CAAlB,CAAf;AAQA,eAAepD,SAAS,CAACmB,cAAD,CAAxB;;AAGA,SAASA,cAAT,EAAyBT,cAAzB","names":["React","color","withTheme","AdornmentSide","getConstants","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","_ref","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","Provider","value","TextInputAffix","_ref2","text","labelStyle","theme","isV3","AFFIX_OFFSET","useContext","textColor","colors","onSurface","_theme$colors","alpha","dark","rgb","string","offset","style","top","Animated","View","styles","container","opacity","interpolate","inputRange","outputRange","Text","displayName","StyleSheet","create","position","justifyContent","alignItems"],"sources":["TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\nimport type { Theme } from '../../../types';\nimport { getConstants } from '../helpers';\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const { AFFIX_OFFSET } = getConstants(theme.isV3);\n\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n  } = React.useContext(AffixContext);\n\n  const textColor = color(\n    theme.isV3 ? theme.colors.onSurface : theme.colors?.text\n  )\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}