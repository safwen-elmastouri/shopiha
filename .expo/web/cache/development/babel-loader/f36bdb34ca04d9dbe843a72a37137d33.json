{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { navigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport styles from \"../styles/global\";\nimport { Formik } from \"formik\";\nimport * as yup from 'yup';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar validation = yup.object({\n  email: yup.string().email(\"Please enter valid email\").required(\"Email adress is required\"),\n  password: yup.string().min(8).required(\"Password is required\")\n});\nvar Stack = createNativeStackNavigator();\n\nvar SignIn = function SignIn(_ref) {\n  var navigation = _ref.navigation;\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      source: require(\"../assets/sign.png\"),\n      style: signimg\n    }), _jsx(Formik, {\n      initialValues: {\n        email: '',\n        password: ''\n      },\n      validationSchema: validation,\n      onSubmit: function onSubmit(values, actions) {\n        actions.resetForm();\n        console.log(values);\n      },\n      children: function children(_ref2) {\n        var handleChange = _ref2.handleChange,\n            handleSubmit = _ref2.handleSubmit,\n            values = _ref2.values,\n            errors = _ref2.errors,\n            isValid = _ref2.isValid,\n            handleBlur = _ref2.handleBlur;\n        return _jsxs(View, {\n          style: styles.containerSign,\n          children: [_jsx(Text, {\n            style: styles.title,\n            children: \" Sign in\"\n          }), _jsx(TextInput, {\n            style: styles.input,\n            placeholder: \"Email adress\",\n            placeholderTextColor: '#343a40',\n            keyboardType: \"email-address\",\n            onChangeText: handleChange('email'),\n            onBlur: handleBlur('email'),\n            value: values.email\n          }), errors.email && _jsx(Text, {\n            style: styles.errText,\n            children: errors.email\n          }), _jsx(TextInput, {\n            style: styles.input,\n            placeholder: \"Password\",\n            secureTextEntry: true,\n            placeholderTextColor: '#343a40',\n            onChangeText: handleChange('password'),\n            onBlur: handleBlur('password'),\n            value: values.password\n          }), errors.password && _jsx(Text, {\n            style: styles.errText,\n            children: errors.password\n          }), _jsx(Button, {\n            title: \"Sign in\",\n            color: \"#560bad\",\n            disabled: !isValid,\n            onPress: function onPress() {\n              handleSubmit;\n              navigation.navigate('Home');\n            }\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return navigation.navigate('SignUp');\n            },\n            children: _jsx(Text, {\n              style: styles.text,\n              children: \"Don't have an account Sign up \"\n            })\n          })]\n        });\n      }\n    })]\n  });\n};\n\nexport default SignIn;","map":{"version":3,"names":["React","navigationContainer","createNativeStackNavigator","styles","Formik","yup","validation","object","email","string","required","password","min","Stack","SignIn","navigation","container","require","signimg","values","actions","resetForm","console","log","handleChange","handleSubmit","errors","isValid","handleBlur","containerSign","title","input","errText","navigate","text"],"sources":["C:/Users/Safwen/Desktop/SignApp/components/signIn.js"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n    View , Button, Image,\r\n    TextInput , Text,\r\n    TouchableOpacity\r\n} from \"react-native\"\r\nimport { navigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\n\r\nimport styles from \"../styles/global\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from 'yup';\r\n\r\nconst validation = yup.object({\r\n    email:yup\r\n    .string()\r\n    .email(\"Please enter valid email\")\r\n    .required(\"Email adress is required\"),\r\n    password:yup\r\n    .string()\r\n    .min(8)\r\n    .required(\"Password is required\"),\r\n   \r\n})\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nconst SignIn=({navigation}) =>{\r\n\r\n    return (\r\n       \r\n        <View style={styles.container} > \r\n               <Image source={require('../assets/sign.png')} style={signimg} />      \r\n            <Formik\r\n            initialValues={{email :'' , password:''} }\r\n            validationSchema={validation}\r\n            onSubmit={(values,actions) => {\r\n                actions.resetForm()\r\n                console.log(values)\r\n\r\n\r\n\r\n            }}\r\n            >\r\n                {({handleChange,\r\n     handleSubmit,\r\n     values,\r\n     errors,\r\n     isValid,\r\n     handleBlur\r\n     })=>( \r\n                    <View style={styles.containerSign}>\r\n                       <Text style={styles.title}> Sign in\r\n                         </Text>  \r\n                        \r\n                        <TextInput\r\n                         style={styles.input}\r\n                        placeholder='Email adress' \r\n                        placeholderTextColor={'#343a40'}\r\n                        keyboardType=\"email-address\"\r\n                        onChangeText={handleChange('email')}\r\n                        onBlur={handleBlur('email')}\r\n                        value={values.email}\r\n                        />\r\n                        {errors.email &&\r\n                        <Text style={styles.errText}>{errors.email}</Text>\r\n                        }\r\n                        <TextInput \r\n                        style={styles.input}\r\n                        placeholder='Password'\r\n                        secureTextEntry={true} \r\n                        placeholderTextColor={'#343a40'}\r\n                        onChangeText={handleChange('password')}\r\n                        onBlur={handleBlur('password')}\r\n                        value={values.password}\r\n                        />\r\n                        {errors.password &&\r\n                        <Text style={styles.errText}>{errors.password}</Text>\r\n                        }\r\n                        <Button\r\n                        title=\"Sign in\"\r\n                        color='#560bad'\r\n                        disabled={!isValid}\r\n                        onPress={\r\n                           ()=> {handleSubmit\r\n                             navigation.navigate('Home')\r\n\r\n                        }}\r\n                        />\r\n                        <TouchableOpacity onPress={() => navigation.navigate('SignUp')} >\r\n                        <Text style={styles.text}>Don't have an account Sign up </Text>\r\n                        </TouchableOpacity>\r\n\r\n                    </View>\r\n                    \r\n                    \r\n                )}\r\n            </Formik>\r\n        </View>\r\n\r\n    )\r\n\r\n} \r\nexport default SignIn;\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;AAMA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,0BAAT,QAA2C,gCAA3C;AAEA,OAAOC,MAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;;AAEA,IAAMC,UAAU,GAAGD,GAAG,CAACE,MAAJ,CAAW;EAC1BC,KAAK,EAACH,GAAG,CACRI,MADK,GAELD,KAFK,CAEC,0BAFD,EAGLE,QAHK,CAGI,0BAHJ,CADoB;EAK1BC,QAAQ,EAACN,GAAG,CACXI,MADQ,GAERG,GAFQ,CAEJ,CAFI,EAGRF,QAHQ,CAGC,sBAHD;AALiB,CAAX,CAAnB;AAYA,IAAMG,KAAK,GAAGX,0BAA0B,EAAxC;;AAEA,IAAMY,MAAM,GAAC,SAAPA,MAAO,OAAiB;EAAA,IAAfC,UAAe,QAAfA,UAAe;EAE1B,OAEI,MAAC,IAAD;IAAM,KAAK,EAAEZ,MAAM,CAACa,SAApB;IAAA,WACO,KAAC,KAAD;MAAO,MAAM,EAAEC,OAAO,sBAAtB;MAA8C,KAAK,EAAEC;IAArD,EADP,EAEI,KAAC,MAAD;MACA,aAAa,EAAE;QAACV,KAAK,EAAE,EAAR;QAAaG,QAAQ,EAAC;MAAtB,CADf;MAEA,gBAAgB,EAAEL,UAFlB;MAGA,QAAQ,EAAE,kBAACa,MAAD,EAAQC,OAAR,EAAoB;QAC1BA,OAAO,CAACC,SAAR;QACAC,OAAO,CAACC,GAAR,CAAYJ,MAAZ;MAIH,CATD;MAAA,UAWK;QAAA,IAAEK,YAAF,SAAEA,YAAF;QAAA,IACZC,YADY,SACZA,YADY;QAAA,IAEZN,MAFY,SAEZA,MAFY;QAAA,IAGZO,MAHY,SAGZA,MAHY;QAAA,IAIZC,OAJY,SAIZA,OAJY;QAAA,IAKZC,UALY,SAKZA,UALY;QAAA,OAOG,MAAC,IAAD;UAAM,KAAK,EAAEzB,MAAM,CAAC0B,aAApB;UAAA,WACG,KAAC,IAAD;YAAM,KAAK,EAAE1B,MAAM,CAAC2B,KAApB;YAAA;UAAA,EADH,EAII,KAAC,SAAD;YACC,KAAK,EAAE3B,MAAM,CAAC4B,KADf;YAEA,WAAW,EAAC,cAFZ;YAGA,oBAAoB,EAAE,SAHtB;YAIA,YAAY,EAAC,eAJb;YAKA,YAAY,EAAEP,YAAY,CAAC,OAAD,CAL1B;YAMA,MAAM,EAAEI,UAAU,CAAC,OAAD,CANlB;YAOA,KAAK,EAAET,MAAM,CAACX;UAPd,EAJJ,EAaKkB,MAAM,CAAClB,KAAP,IACD,KAAC,IAAD;YAAM,KAAK,EAAEL,MAAM,CAAC6B,OAApB;YAAA,UAA8BN,MAAM,CAAClB;UAArC,EAdJ,EAgBI,KAAC,SAAD;YACA,KAAK,EAAEL,MAAM,CAAC4B,KADd;YAEA,WAAW,EAAC,UAFZ;YAGA,eAAe,EAAE,IAHjB;YAIA,oBAAoB,EAAE,SAJtB;YAKA,YAAY,EAAEP,YAAY,CAAC,UAAD,CAL1B;YAMA,MAAM,EAAEI,UAAU,CAAC,UAAD,CANlB;YAOA,KAAK,EAAET,MAAM,CAACR;UAPd,EAhBJ,EAyBKe,MAAM,CAACf,QAAP,IACD,KAAC,IAAD;YAAM,KAAK,EAAER,MAAM,CAAC6B,OAApB;YAAA,UAA8BN,MAAM,CAACf;UAArC,EA1BJ,EA4BI,KAAC,MAAD;YACA,KAAK,EAAC,SADN;YAEA,KAAK,EAAC,SAFN;YAGA,QAAQ,EAAE,CAACgB,OAHX;YAIA,OAAO,EACJ,mBAAK;cAACF,YAAY;cAChBV,UAAU,CAACkB,QAAX,CAAoB,MAApB;YAEJ;UARD,EA5BJ,EAsCI,KAAC,gBAAD;YAAkB,OAAO,EAAE;cAAA,OAAMlB,UAAU,CAACkB,QAAX,CAAoB,QAApB,CAAN;YAAA,CAA3B;YAAA,UACA,KAAC,IAAD;cAAM,KAAK,EAAE9B,MAAM,CAAC+B,IAApB;cAAA;YAAA;UADA,EAtCJ;QAAA,EAPH;MAAA;IAXL,EAFJ;EAAA,EAFJ;AAyEH,CA3ED;;AA4EA,eAAepB,MAAf"},"metadata":{},"sourceType":"module"}