{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"name\", \"onPress\", \"forceTextInputFocus\", \"color\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport IconButton from \"../../IconButton/IconButton\";\nimport { useTheme } from \"../../../core/theming\";\nimport { getConstants } from \"../helpers\";\nimport { ICON_SIZE } from \"../constants\";\nvar StyleContext = React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {}\n});\nvar IconAdornment = function IconAdornment(_ref) {\n  var icon = _ref.icon,\n    topPosition = _ref.topPosition,\n    side = _ref.side,\n    isTextInputFocused = _ref.isTextInputFocused,\n    forceFocus = _ref.forceFocus;\n  var _useTheme = useTheme(),\n    isV3 = _useTheme.isV3;\n  var _getConstants = getConstants(isV3),\n    ICON_OFFSET = _getConstants.ICON_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, ICON_OFFSET);\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus\n  };\n  return React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\n\nvar TextInputIcon = function TextInputIcon(_ref2) {\n  var name = _ref2.name,\n    onPress = _ref2.onPress,\n    forceTextInputFocus = _ref2.forceTextInputFocus,\n    color = _ref2.color,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var _React$useContext = React.useContext(StyleContext),\n    style = _React$useContext.style,\n    isTextInputFocused = _React$useContext.isTextInputFocused,\n    forceFocus = _React$useContext.forceFocus;\n  var onPressWithFocusControl = React.useCallback(function () {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  var theme = useTheme();\n  var iconColor = color;\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(IconButton, _extends({\n    icon: name,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    iconColor: typeof color === 'function' ? color(isTextInputFocused) : iconColor\n  }, rest)));\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;\n\nexport { IconAdornment };","map":{"version":3,"mappings":"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","names":["React","IconButton","useTheme","getConstants","ICON_SIZE","StyleContext","createContext","style","isTextInputFocused","forceFocus","IconAdornment","_ref","icon","topPosition","side","isV3","ICON_OFFSET","top","contextState","Provider","value","TextInputIcon","_ref2","name","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","theme","iconColor","disabled","colors","onSurface","onSurfaceVariant","text","View","styles","container","iconButton","size","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"sources":["TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\n\nimport IconButton from '../../IconButton/IconButton';\nimport type { $Omit, Theme } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport { useTheme } from '../../../core/theming';\nimport { getConstants } from '../helpers';\nimport { ICON_SIZE } from '../constants';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * Icon to show.\n   */\n  name: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: Theme;\n};\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus }) => {\n  const { isV3 } = useTheme();\n  const { ICON_OFFSET } = getConstants(isV3);\n\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon name=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  name,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(() => {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress?.();\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n\n  const theme = useTheme();\n\n  let iconColor = color;\n\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={name}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        iconColor={\n          typeof color === 'function' ? color(isTextInputFocused) : iconColor\n        }\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"module"}